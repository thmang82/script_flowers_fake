import { Script } from '@script_types/script/script';
import { DataSourcesTypes as DS } from '@script_types/sources/sources_types';
import { SourceFlowersStatus } from '@script_types/sources/flowers/source_flowers_status';
import { ScriptConfig } from '../gen/spec_config'; /* File will be automatically generated by compiler! Run "nom run cli install" */
import { specification } from './spec';
import { getFlowers } from './fake_data';

type ProvidedSources = "flowers_status";

export class MyScript implements Script.Class<ScriptConfig, ProvidedSources> {

    private flower_data: SourceFlowersStatus.Flower[] = [];

    start = async (ctx: Script.Context, _config: ScriptConfig): Promise<void> => {
    
        console.info("Ident:" + specification.id_ident);

        ctx.script.registerConfigOptionsProvider(async (req) => {
            let ident = req.parameter_ident;
            if (ident == "flower_id") {
                return {
                    dropdown_entries: this.flower_data.map(flower => {
                        return {
                            value: flower.ident,
                            name: flower.name
                        }
                    })
                }
            } else {
                return { no_data: 'UnknownID' };
            }
        });

        ctx.data.mqtt.subscribe("mytopic/#", this.demoReceiveMqttMsg);
        console.log("Start done!");
    }

    stop = async (_reason: Script.StopReason): Promise<void> => {
        console.info("Stopping all my stuff ...");
    }

    public dataRequest = async (type: ProvidedSources, req_params: object): Promise<DS.MapData<typeof type> | undefined> => {
        if (type == "flowers_status") { 
            return this.dataRequest_FlowersStatus(req_params);
        }
       return undefined;
    };

    public dataRequest_FlowersStatus = async (_req_params: object): Promise<SourceFlowersStatus.Data> => {
        this.flower_data = getFlowers();
        return {
            // Todo: insert the correct response type
            flowers: this.flower_data
        };
    }


    public executeCommand = async (type: ProvidedSources, _env: Script.ExecuteEnv, _cmd: DS.MapCmdReq<typeof type>): Promise<DS.MapCmdRes<typeof type> |Â undefined> => {
        return {}
    }

    demoReceiveMqttMsg = (topic: string, _data: string) => {
        console.log("demoReceiveMqttMsg:", topic);
    }
}

export const script = new MyScript();